plugins {
    id "dev.architectury.loom" version "1.6-SNAPSHOT"
    id "com.hypherionmc.modutils.modpublisher" version "2.+"
    id "maven-publish"
}

repositories {
    maven {
        url "https://papermc.io/repo/repository/maven-public/"
    }
    maven { name 'Jitpack'; url 'https://jitpack.io' }
}

base.archivesName = project.archives_base_name
version = "${project.mod_version}+mc${project.minecraft_version}"
group = project.maven_group

configurations {
    shade.transitive = false
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"
    forgeRuntimeLibrary(modImplementation(include("com.velocitypowered:velocity-native:3.3.0-SNAPSHOT")))
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    toolchain.languageVersion = JavaLanguageVersion.of(17)

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
}

remapJar {
    atAccessWideners.add("krypton.accesswidener")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

afterEvaluate {
    tasks.getByName("configureClientLaunch").doFirst {
        loom {
            runs {
                all {
                    property("fabric.development=true")
                    property("mixin.hotSwap")
                    // vmArg("-javaagent:${dependencies.module(group = "net.fabricmc", name = "sponge-mixin")}")
                    def mixinJarFile = configurations.compileClasspath.files {
                        it.group == "net.fabricmc" && it.name == "sponge-mixin"
                    }.find { true }
                    vmArg("-javaagent:$mixinJarFile")

                    ideConfigGenerated = true
                }
            }
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/krypton.accesswidener")
}

publisher {
    apiKeys {
        modrinth System.getenv("MODRINTH_TOKEN")
        curseforge System.getenv("CURSEFORGE_TOKEN")
    }

    setCurseID("${project.curseforge_id}")
    setModrinthID("${project.modrinth_id}")
    setVersionType("alpha")
    setChangelog(file("CHANGELOG.md").getText("UTF-8"))
    setVersion("${project.version}")
    setDisplayName("${project.version}")
    setGameVersions("1.20.2", "1.20.3", "1.20.4")
    setLoaders("neoforge")
    setArtifact(remapJar)
    addAdditionalFile(sourcesJar)
}
